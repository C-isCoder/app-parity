// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api_service_v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	data "app-parity/api/data"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// User from public import app-parity/api/data/user.proto
type User = data.User

// LoginReq from public import app-parity/api/data/user.proto
type LoginReq = data.LoginReq

// LoginResp from public import app-parity/api/data/user.proto
type LoginResp = data.LoginResp

// RegisterReq from public import app-parity/api/data/user.proto
type RegisterReq = data.RegisterReq

// SearchReq from public import app-parity/api/data/drug.proto
type SearchReq = data.SearchReq

// SearchResp from public import app-parity/api/data/drug.proto
type SearchResp = data.SearchResp

// DrugsReq from public import app-parity/api/data/drug.proto
type DrugsReq = data.DrugsReq

// DrugsResp from public import app-parity/api/data/drug.proto
type DrugsResp = data.DrugsResp

// Drug from public import app-parity/api/data/drug.proto
type Drug = data.Drug

func init() { proto.RegisterFile("api/api.proto", fileDescriptor_1b40cafcd4234784) }

var fileDescriptor_1b40cafcd4234784 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xc1, 0x4e, 0xea, 0x40,
	0x14, 0xa5, 0xef, 0xa9, 0x21, 0x43, 0x44, 0xa9, 0x89, 0x4a, 0x31, 0x4d, 0xec, 0xca, 0x0d, 0x9d,
	0x80, 0x7f, 0x60, 0x4c, 0xdc, 0xb8, 0x20, 0xa8, 0x31, 0x31, 0xba, 0x98, 0xc2, 0x38, 0x4c, 0x02,
	0x9d, 0x71, 0x66, 0x4a, 0xc2, 0xd6, 0x5f, 0x70, 0xe3, 0xf7, 0x18, 0x17, 0x2c, 0x49, 0xfc, 0x01,
	0x41, 0x3f, 0xc4, 0xf4, 0x4e, 0x81, 0x08, 0x12, 0x56, 0xbd, 0xf7, 0x9e, 0x73, 0xcf, 0xe9, 0xb9,
	0x2d, 0xda, 0x26, 0x92, 0x63, 0x22, 0x79, 0x28, 0x95, 0x30, 0xc2, 0x2d, 0xa6, 0xa5, 0xa6, 0xaa,
	0xcf, 0x5b, 0x34, 0xec, 0xd7, 0xbc, 0x2a, 0xe3, 0xa6, 0x93, 0x44, 0x61, 0x4b, 0xf4, 0x30, 0x13,
	0x4c, 0x60, 0xa0, 0x45, 0xc9, 0x23, 0x74, 0xd0, 0x40, 0x65, 0xd7, 0xbd, 0x0a, 0x13, 0x82, 0x75,
	0xe9, 0x9c, 0x45, 0x7b, 0xd2, 0x0c, 0x32, 0xf0, 0x28, 0x03, 0xc1, 0x31, 0x8e, 0x85, 0x21, 0x86,
	0x8b, 0x58, 0x67, 0xe8, 0x31, 0x13, 0xd5, 0x41, 0xa4, 0xaa, 0x92, 0x28, 0x6e, 0x06, 0x40, 0x6a,
	0x13, 0x43, 0x70, 0xa2, 0xa9, 0x5a, 0x43, 0x69, 0xab, 0x84, 0x59, 0x4a, 0xfd, 0xcd, 0x41, 0x85,
	0x1b, 0x4d, 0xd5, 0x95, 0x8d, 0xe0, 0x5e, 0xa3, 0xcd, 0x4b, 0xc1, 0x78, 0xec, 0x1e, 0x86, 0xbf,
	0x93, 0x85, 0x30, 0x6e, 0xd2, 0x27, 0xaf, 0xbc, 0x02, 0xd1, 0x32, 0xd8, 0x7f, 0xfe, 0xf8, 0x7e,
	0xf9, 0xb7, 0x1b, 0x14, 0xe1, 0x2d, 0x70, 0xbf, 0x86, 0xbb, 0x20, 0xf6, 0x80, 0xf2, 0x4d, 0xca,
	0xb8, 0x36, 0x54, 0xb9, 0x95, 0xc5, 0xf5, 0x29, 0xb2, 0x46, 0xbb, 0x0c, 0xda, 0x7b, 0x41, 0x69,
	0xa6, 0xad, 0xb2, 0xc5, 0xfa, 0xbb, 0x83, 0x0a, 0xe7, 0x2a, 0x61, 0xd3, 0x10, 0xf7, 0x08, 0xd9,
	0x96, 0xa8, 0x56, 0xc7, 0x5d, 0xd2, 0xb4, 0xf3, 0xd4, 0xce, 0x5b, 0x05, 0x69, 0x19, 0x1c, 0x80,
	0x5f, 0x29, 0xd8, 0x81, 0x73, 0xa5, 0x7e, 0xda, 0xea, 0xdd, 0xa2, 0xfc, 0x05, 0x35, 0xa9, 0x81,
	0x5e, 0xbe, 0x12, 0x8c, 0xff, 0x4c, 0x92, 0x21, 0xf3, 0x2b, 0xb9, 0xc5, 0x99, 0x72, 0xfa, 0xd4,
	0x67, 0x27, 0xc3, 0xb1, 0x9f, 0x1b, 0x8d, 0xfd, 0xdc, 0x70, 0xe2, 0x3b, 0xa3, 0x89, 0xef, 0x7c,
	0x4e, 0x7c, 0xe7, 0xf5, 0xcb, 0xcf, 0xdd, 0x2d, 0xfc, 0x65, 0x8d, 0xff, 0x8d, 0x8d, 0x68, 0x0b,
	0x3e, 0xe0, 0xe9, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x60, 0x7a, 0xb2, 0x91, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	// 用户登录
	Login(ctx context.Context, in *data.LoginReq, opts ...grpc.CallOption) (*data.LoginResp, error)
	// 用户注册
	Register(ctx context.Context, in *data.RegisterReq, opts ...grpc.CallOption) (*data.LoginResp, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Login(ctx context.Context, in *data.LoginReq, opts ...grpc.CallOption) (*data.LoginResp, error) {
	out := new(data.LoginResp)
	err := c.cc.Invoke(ctx, "/api.service.v1.UserService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Register(ctx context.Context, in *data.RegisterReq, opts ...grpc.CallOption) (*data.LoginResp, error) {
	out := new(data.LoginResp)
	err := c.cc.Invoke(ctx, "/api.service.v1.UserService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	// 用户登录
	Login(context.Context, *data.LoginReq) (*data.LoginResp, error)
	// 用户注册
	Register(context.Context, *data.RegisterReq) (*data.LoginResp, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(data.LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.UserService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*data.LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(data.RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.UserService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Register(ctx, req.(*data.RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.service.v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _UserService_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// DrugServiceClient is the client API for DrugService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DrugServiceClient interface {
	// 药品关键字搜索
	DrugSearch(ctx context.Context, in *data.SearchReq, opts ...grpc.CallOption) (*data.SearchResp, error)
	// 获取所有药品列表
	GetDrugs(ctx context.Context, in *data.DrugsReq, opts ...grpc.CallOption) (*data.DrugsResp, error)
}

type drugServiceClient struct {
	cc *grpc.ClientConn
}

func NewDrugServiceClient(cc *grpc.ClientConn) DrugServiceClient {
	return &drugServiceClient{cc}
}

func (c *drugServiceClient) DrugSearch(ctx context.Context, in *data.SearchReq, opts ...grpc.CallOption) (*data.SearchResp, error) {
	out := new(data.SearchResp)
	err := c.cc.Invoke(ctx, "/api.service.v1.DrugService/DrugSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drugServiceClient) GetDrugs(ctx context.Context, in *data.DrugsReq, opts ...grpc.CallOption) (*data.DrugsResp, error) {
	out := new(data.DrugsResp)
	err := c.cc.Invoke(ctx, "/api.service.v1.DrugService/GetDrugs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DrugServiceServer is the server API for DrugService service.
type DrugServiceServer interface {
	// 药品关键字搜索
	DrugSearch(context.Context, *data.SearchReq) (*data.SearchResp, error)
	// 获取所有药品列表
	GetDrugs(context.Context, *data.DrugsReq) (*data.DrugsResp, error)
}

func RegisterDrugServiceServer(s *grpc.Server, srv DrugServiceServer) {
	s.RegisterService(&_DrugService_serviceDesc, srv)
}

func _DrugService_DrugSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(data.SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugServiceServer).DrugSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.DrugService/DrugSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugServiceServer).DrugSearch(ctx, req.(*data.SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrugService_GetDrugs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(data.DrugsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugServiceServer).GetDrugs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.DrugService/GetDrugs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugServiceServer).GetDrugs(ctx, req.(*data.DrugsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DrugService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.service.v1.DrugService",
	HandlerType: (*DrugServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DrugSearch",
			Handler:    _DrugService_DrugSearch_Handler,
		},
		{
			MethodName: "GetDrugs",
			Handler:    _DrugService_GetDrugs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
