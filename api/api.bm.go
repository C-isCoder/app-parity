// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api/api.proto

/*
Package api_service_v1 is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api/api.proto
*/
package api_service_v1

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathUserServiceLogin = "/user/v1/login"
var PathUserServiceRegister = "/user/v1/register"

var PathDrugServiceDrugSearch = "/drug/v1/search"
var PathDrugServiceGetDrugs = "/drug/v1/drugs"

// UserServiceBMServer is the server API for UserService service.
// 用户服务
type UserServiceBMServer interface {
	// 用户登录
	Login(ctx context.Context, req *LoginReq) (resp *LoginResp, err error)

	// 用户注册
	Register(ctx context.Context, req *RegisterReq) (resp *LoginResp, err error)
}

var UserServiceSvc UserServiceBMServer

func userServiceLogin(c *bm.Context) {
	p := new(LoginReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserServiceSvc.Login(c, p)
	c.JSON(resp, err)
}

func userServiceRegister(c *bm.Context) {
	p := new(RegisterReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserServiceSvc.Register(c, p)
	c.JSON(resp, err)
}

// RegisterUserServiceBMServer Register the blademaster route
func RegisterUserServiceBMServer(e *bm.Engine, server UserServiceBMServer) {
	UserServiceSvc = server
	e.POST("/user/v1/login", userServiceLogin)
	e.POST("/user/v1/register", userServiceRegister)
}

// DrugServiceBMServer is the server API for DrugService service.
// 药品搜索服务
type DrugServiceBMServer interface {
	// 药品关键字搜索
	DrugSearch(ctx context.Context, req *SearchReq) (resp *SearchResp, err error)

	// 获取所有药品列表
	GetDrugs(ctx context.Context, req *DrugsReq) (resp *DrugsResp, err error)
}

var DrugServiceSvc DrugServiceBMServer

func drugServiceDrugSearch(c *bm.Context) {
	p := new(SearchReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := DrugServiceSvc.DrugSearch(c, p)
	c.JSON(resp, err)
}

func drugServiceGetDrugs(c *bm.Context) {
	p := new(DrugsReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := DrugServiceSvc.GetDrugs(c, p)
	c.JSON(resp, err)
}

// RegisterDrugServiceBMServer Register the blademaster route
func RegisterDrugServiceBMServer(e *bm.Engine, server DrugServiceBMServer) {
	DrugServiceSvc = server
	e.POST("/drug/v1/search", drugServiceDrugSearch)
	e.GET("/drug/v1/drugs", drugServiceGetDrugs)
}
